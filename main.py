"""
DSA Practice - Grade 12
Main runner ƒë·ªÉ test c√°c b√†i t·∫≠p DSA

C√°ch ch·∫°y:
- Ch·∫°y t·∫•t c·∫£ test: python main.py
- Ch·∫°y test c·ª• th·ªÉ: python main.py --problem palindrome
"""

import sys
import argparse
from problems.palindrome import Solution as PalindromeSolution
from problems.fibonacci import Solution as FibonacciSolution
from problems.triangle_right import Solution as TriangleRightSolution
from problems.triangle_isosceles import Solution as TriangleIsoscelesSolution
from problems.triangle_hollow import Solution as TriangleHollowSolution


def test_palindrome():
    """Test b√†i Palindrome"""
    print("=" * 50)
    print("TESTING: Is Palindrome")
    print("=" * 50)
    
    solution = PalindromeSolution()
    
    # Test cases
    test_cases = [
        (121, True, "S·ªë ƒë·ªëi x·ª©ng"),
        (-121, False, "S·ªë √¢m kh√¥ng ph·∫£i palindrome"),
        (10, False, "S·ªë c√≥ 0 ·ªü cu·ªëi"),
        (0, True, "S·ªë 0"),
        (1221, True, "S·ªë ch·∫µn ƒë·ªëi x·ª©ng"),
        (12321, True, "S·ªë l·∫ª ƒë·ªëi x·ª©ng"),
        (123, False, "S·ªë kh√¥ng ƒë·ªëi x·ª©ng")
    ]
    
    passed = 0
    total = len(test_cases)
    
    for i, (input_val, expected, description) in enumerate(test_cases, 1):
        result = solution.isPalindrome(input_val)
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        
        print(f"Test {i}: {description}")
        print(f"  Input: {input_val}")
        print(f"  Expected: {expected}, Got: {result}")
        print(f"  Status: {status}")
        print()
        
        if result == expected:
            passed += 1
    
    print(f"Results: {passed}/{total} tests passed")
    return passed == total


def test_fibonacci():
    """Test b√†i Fibonacci"""
    print("=" * 50)
    print("TESTING: Is Fibonacci Number")
    print("=" * 50)
    
    solution = FibonacciSolution()
    
    # Test cases
    test_cases = [
        (0, True, "Fibonacci ƒë·∫ßu ti√™n"),
        (1, True, "Fibonacci th·ª© 2 v√† 3"),
        (2, True, "Fibonacci th·ª© 4"),
        (3, True, "Fibonacci th·ª© 5"),
        (5, True, "Fibonacci th·ª© 6"),
        (8, True, "Fibonacci th·ª© 7"),
        (13, True, "Fibonacci th·ª© 8"),
        (4, False, "Kh√¥ng ph·∫£i Fibonacci"),
        (6, False, "Kh√¥ng ph·∫£i Fibonacci"),
        (7, False, "Kh√¥ng ph·∫£i Fibonacci"),
        (21, True, "Fibonacci l·ªõn h∆°n"),
        (22, False, "Kh√¥ng ph·∫£i Fibonacci l·ªõn")
    ]
    
    passed = 0
    total = len(test_cases)
    
    for i, (input_val, expected, description) in enumerate(test_cases, 1):
        result = solution.isFibonacci(input_val)
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        
        print(f"Test {i}: {description}")
        print(f"  Input: {input_val}")
        print(f"  Expected: {expected}, Got: {result}")
        print(f"  Status: {status}")
        print()
        
        if result == expected:
            passed += 1
    
    print(f"Results: {passed}/{total} tests passed")
    return passed == total


def test_triangle_right():
    """Test b√†i Right Triangle"""
    print("=" * 50)
    print("TESTING: Right Triangle Pattern")
    print("=" * 50)
    
    solution = TriangleRightSolution()
    
    # Test cases
    test_cases = [
        (1, ["*"], "Tam gi√°c 1 d√≤ng"),
        (2, ["*", "**"], "Tam gi√°c 2 d√≤ng"),
        (3, ["*", "**", "***"], "Tam gi√°c 3 d√≤ng"),
        (4, ["*", "**", "***", "****"], "Tam gi√°c 4 d√≤ng"),
        (5, ["*", "**", "***", "****", "*****"], "Tam gi√°c 5 d√≤ng"),
        (0, [], "Edge case: n=0")
    ]
    
    passed = 0
    total = len(test_cases)
    
    for i, (input_val, expected, description) in enumerate(test_cases, 1):
        result = solution.printRightTriangle(input_val)
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        
        print(f"Test {i}: {description}")
        print(f"  Input: n={input_val}")
        print(f"  Expected: {expected}")
        print(f"  Got: {result}")
        print(f"  Status: {status}")
        print()
        
        if result == expected:
            passed += 1
    
    print(f"Results: {passed}/{total} tests passed")
    return passed == total


def test_triangle_isosceles():
    """Test b√†i Isosceles Triangle"""
    print("=" * 50)
    print("TESTING: Isosceles Triangle Pattern")
    print("=" * 50)
    
    solution = TriangleIsoscelesSolution()
    
    # Test cases
    test_cases = [
        (1, ["*"], "Tam gi√°c c√¢n 1 d√≤ng"),
        (2, [" *", "***"], "Tam gi√°c c√¢n 2 d√≤ng"),
        (3, ["  *", " ***", "*****"], "Tam gi√°c c√¢n 3 d√≤ng"),
        (4, ["   *", "  ***", " *****", "*******"], "Tam gi√°c c√¢n 4 d√≤ng"),
        (0, [], "Edge case: n=0")
    ]
    
    passed = 0
    total = len(test_cases)
    
    for i, (input_val, expected, description) in enumerate(test_cases, 1):
        result = solution.printIsoscelesTriangle(input_val)
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        
        print(f"Test {i}: {description}")
        print(f"  Input: n={input_val}")
        print(f"  Expected: {expected}")
        print(f"  Got: {result}")
        print(f"  Status: {status}")
        print()
        
        if result == expected:
            passed += 1
    
    print(f"Results: {passed}/{total} tests passed")
    return passed == total


def test_triangle_hollow():
    """Test b√†i Hollow Triangle"""
    print("=" * 50)
    print("TESTING: Hollow Triangle Pattern")
    print("=" * 50)
    
    solution = TriangleHollowSolution()
    
    # Test cases
    test_cases = [
        (1, ["*"], "Tam gi√°c r·ªóng 1 d√≤ng"),
        (2, [" *", "***"], "Tam gi√°c r·ªóng 2 d√≤ng"),
        (3, ["  *", " * *", "*****"], "Tam gi√°c r·ªóng 3 d√≤ng"),
        (4, ["   *", "  * *", " *   *", "*******"], "Tam gi√°c r·ªóng 4 d√≤ng"),
        (5, ["    *", "   * *", "  *   *", " *     *", "*********"], "Tam gi√°c r·ªóng 5 d√≤ng"),
        (0, [], "Edge case: n=0")
    ]
    
    passed = 0
    total = len(test_cases)
    
    for i, (input_val, expected, description) in enumerate(test_cases, 1):
        result = solution.printHollowTriangle(input_val)
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        
        print(f"Test {i}: {description}")
        print(f"  Input: n={input_val}")
        print(f"  Expected: {expected}")
        print(f"  Got: {result}")
        print(f"  Status: {status}")
        print()
        
        if result == expected:
            passed += 1
    
    print(f"Results: {passed}/{total} tests passed")
    return passed == total


def main():
    parser = argparse.ArgumentParser(description='DSA Practice Runner')
    parser.add_argument('--problem', choices=[
        'palindrome', 'fibonacci', 'triangle-right', 'triangle-isosceles', 
        'triangle-hollow', 'triangles', 'all'
    ], default='all', help='Ch·ªçn b√†i ƒë·ªÉ test')
    
    args = parser.parse_args()
    
    print("üöÄ DSA PRACTICE - GRADE 12")
    print("=" * 50)
    
    all_passed = True
    
    if args.problem in ['palindrome', 'all']:
        try:
            if not test_palindrome():
                all_passed = False
        except Exception as e:
            print(f"‚ùå Error testing Palindrome: {e}")
            all_passed = False
    
    if args.problem in ['fibonacci', 'all']:
        try:
            if not test_fibonacci():
                all_passed = False
        except Exception as e:
            print(f"‚ùå Error testing Fibonacci: {e}")
            all_passed = False
    
    if args.problem in ['triangle-right', 'triangles', 'all']:
        try:
            if not test_triangle_right():
                all_passed = False
        except Exception as e:
            print(f"‚ùå Error testing Right Triangle: {e}")
            all_passed = False
    
    if args.problem in ['triangle-isosceles', 'triangles', 'all']:
        try:
            if not test_triangle_isosceles():
                all_passed = False
        except Exception as e:
            print(f"‚ùå Error testing Isosceles Triangle: {e}")
            all_passed = False
    
    if args.problem in ['triangle-hollow', 'triangles', 'all']:
        try:
            if not test_triangle_hollow():
                all_passed = False
        except Exception as e:
            print(f"‚ùå Error testing Hollow Triangle: {e}")
            all_passed = False
    
    print("=" * 50)
    if all_passed:
        print("üéâ T·∫§T C·∫¢ TEST ƒê·ªÄU PASS!")
    else:
        print("üòû M·ªòT S·ªê TEST CH∆ØA PASS - H·∫¢Y KI·ªÇM TRA L·∫†I CODE")
    print("=" * 50)


if __name__ == "__main__":
    main()
