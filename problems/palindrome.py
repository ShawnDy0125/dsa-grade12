"""
B√†i 1: Ki·ªÉm tra s·ªë Palindrome
Palindrome l√† s·ªë ƒë·ªçc t·ª´ tr√°i sang ph·∫£i v√† t·ª´ ph·∫£i sang tr√°i ƒë·ªÅu gi·ªëng nhau.

V√≠ d·ª•:
- 121 l√† palindrome
- -121 kh√¥ng ph·∫£i palindrome (v√¨ d·∫•u √¢m)
- 10 kh√¥ng ph·∫£i palindrome

Y√™u c·∫ßu: Implement function isPalindrome(x) tr·∫£ v·ªÅ True/False
"""


class Solution(object):
    def isPalindrome(self, x):
        """
        Ki·ªÉm tra s·ªë x c√≥ ph·∫£i palindrome kh√¥ng
        
        Args:
            x (int): S·ªë c·∫ßn ki·ªÉm tra
            
        Returns:
            bool: True n·∫øu l√† palindrome, False n·∫øu kh√¥ng
        
        C√≥ 3 c√°ch approach kh√°c nhau - Em h√£y ch·ªçn 1 c√°ch ƒë·ªÉ implement:
        
        C√ÅCH 1 - STRING SLICING (D·ªÖ hi·ªÉu nh·∫•t):
        ======================================
        - Chuy·ªÉn s·ªë th√†nh string v√† so s√°nh v·ªõi string ƒë·∫£o ng∆∞·ª£c
        - Time: O(n) v·ªõi n l√† s·ªë ch·ªØ s·ªë
        - Space: O(n) ƒë·ªÉ store string
        - Thu·∫≠t to√°n:
          1. Convert x th√†nh string: s = str(x)
          2. So s√°nh s v·ªõi s[::-1] (string ƒë·∫£o ng∆∞·ª£c)
          3. Return k·∫øt qu·∫£
        
        C√ÅCH 2 - MATH ONLY (Kh√¥ng d√πng string):
        =======================================  
        - ƒê·∫£o ng∆∞·ª£c s·ªë b·∫±ng ph√©p to√°n, kh√¥ng d√πng string
        - Time: O(log n) v·ªõi n l√† gi√° tr·ªã c·ªßa s·ªë
        - Space: O(1)
        - Thu·∫≠t to√°n:
          1. S·ªë √¢m return False
          2. L∆∞u original = x
          3. Build reversed number: digit = x % 10, reversed = reversed * 10 + digit
          4. So s√°nh original == reversed
        
        C√ÅCH 3 - OPTIMIZED (Ch·ªâ reverse m·ªôt n·ª≠a):
        ========================================
        - Ch·ªâ ƒë·∫£o ng∆∞·ª£c n·ª≠a s·ªë, so s√°nh v·ªõi n·ª≠a c√≤n l·∫°i
        - Time: O(log n / 2) - nhanh h∆°n c√°ch 2
        - Space: O(1)  
        - Thu·∫≠t to√°n:
          1. Handle edge cases: x < 0 ho·∫∑c x % 10 == 0 (tr·ª´ x == 0)
          2. Reverse cho ƒë·∫øn khi x <= reversed_half
          3. Check x == reversed_half (even digits) ho·∫∑c x == reversed_half // 10 (odd digits)
        """
        
        # TODO: Em h√£y ch·ªçn 1 trong 3 c√°ch tr√™n ƒë·ªÉ implement
        
        # ============ C√ÅCH 1: STRING SLICING ============
        # Uncomment code d∆∞·ªõi ƒë·ªÉ d√πng c√°ch 1:
        """
        s = str(x)
        return s == s[::-1]
        """
        
        # ============ C√ÅCH 2: MATH ONLY ============
        # Uncomment code d∆∞·ªõi ƒë·ªÉ d√πng c√°ch 2:
        """
        if x < 0:
            return False
        
        original = x
        reversed_num = 0
        
        while x > 0:
            digit = x % 10
            reversed_num = reversed_num * 10 + digit
            x //= 10
        
        return original == reversed_num
        """
        
        # ============ C√ÅCH 3: OPTIMIZED HALF-REVERSE ============
        # Uncomment code d∆∞·ªõi ƒë·ªÉ d√πng c√°ch 3:
        """
        if x < 0 or (x % 10 == 0 and x != 0):
            return False
        
        reversed_half = 0
        while x > reversed_half:
            reversed_half = reversed_half * 10 + x % 10
            x //= 10
        
        return x == reversed_half or x == reversed_half // 10
        """
        
        # ============ DEFAULT IMPLEMENTATION ============
        # Hi·ªán t·∫°i d√πng c√°ch 1 (String Slicing) l√†m m·∫∑c ƒë·ªãnh:
        # TODO: Implement ·ªü ƒë√¢y
        # Vi·∫øt code ·ªü ƒë√¢y



# Test function ƒë·ªÉ demo v√† gi·∫£i th√≠ch  
def test_palindrome_demo():
    """
    Demo function ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ Palindrome v√† c√°c c√°ch ti·∫øp c·∫≠n
    """
    print("=" * 60)
    print("PALINDROME DEMO & EXPLANATION")
    print("=" * 60)
    
    solution = Solution()
    
    # Gi·∫£i th√≠ch palindrome
    print("üìö Palindrome l√† g√¨?")
    print("   - S·ªë ƒë·ªçc t·ª´ tr√°i sang ph·∫£i = t·ª´ ph·∫£i sang tr√°i")
    print("   - V√≠ d·ª•: 121, 1221, 12321")
    print("   - S·ªë √¢m KH√îNG BAO GI·ªú l√† palindrome (v√¨ d·∫•u -)")
    print()
    
    # Test cases v·ªõi gi·∫£i th√≠ch
    print("üß™ Test Cases:")
    test_cases = [
        (121, "Palindrome ƒë∆°n gi·∫£n 3 ch·ªØ s·ªë"),
        (-121, "S·ªë √¢m ‚Üí False (v√¨ d·∫•u -)"),
        (10, "S·ªë c√≥ 0 cu·ªëi ‚Üí False"),
        (0, "S·ªë 0 ‚Üí True"), 
        (1221, "Palindrome ch·∫µn ch·ªØ s·ªë"),
        (12321, "Palindrome l·∫ª ch·ªØ s·ªë"),
        (123321, "Palindrome 6 ch·ªØ s·ªë"),
        (1234321, "Palindrome 7 ch·ªØ s·ªë"),
        (999, "T·∫•t c·∫£ ch·ªØ s·ªë gi·ªëng nhau")
    ]
    
    for x, description in test_cases:
        result = solution.isPalindrome(x)
        status = "‚úÖ YES" if result else "‚ùå NO"
        
        # Demo reverse process
        if x >= 0:
            s = str(x)
            reversed_s = s[::-1]
            print(f"   {x:>7} ‚Üí {status} ({description})")
            print(f"          String: '{s}' vs '{reversed_s}'")
        else:
            print(f"   {x:>7} ‚Üí {status} ({description})")
        print()
    
    print("üí° So s√°nh 3 c√°ch approach:")
    print("   C√ÅCH 1 - String: D·ªÖ hi·ªÉu, code ng·∫Øn, nh∆∞ng d√πng extra memory")
    print("   C√ÅCH 2 - Math: Kh√¥ng d√πng string, memory efficient") 
    print("   C√ÅCH 3 - Optimized: Ch·ªâ check m·ªôt n·ª≠a, fastest execution")
    
    print("\nüîß ƒê·ªÉ th·ª≠ c√°c c√°ch kh√°c nhau:")
    print("   1. M·ªü file palindrome.py") 
    print("   2. Uncomment code trong function isPalindrome()")
    print("   3. Comment l·∫°i code hi·ªán t·∫°i")
    print("   4. Ch·∫°y l·∫°i ƒë·ªÉ so s√°nh performance!")
    
    print(f"\nüìä V√≠ d·ª• step-by-step cho x = 12321:")
    print("   C√°ch 1: '12321' == '12321'[::-1] == '12321' ‚Üí True")
    print("   C√°ch 2: reverse(12321) = 12321 == 12321 ‚Üí True")
    print("   C√°ch 3: 12321 ‚Üí 123 vs 123 (ch·ªâ c·∫ßn check m·ªôt n·ª≠a)")


# Test ri√™ng cho file n√†y
if __name__ == "__main__":
    test_palindrome_demo()
